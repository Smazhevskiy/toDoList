{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","utils/error-utils.ts","features/login/auth-reducer.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/login/Login.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskTitle","taskId","model","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","error","setAppStatusAC","status","handleServerNetworkError","message","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedInAC","state","action","payload","value","authReducer","reducer","actions","isInitialized","setAppInitializedAC","appReducer","removeTodolistAC","index","findIndex","tl","splice","addTodolistAC","unshift","todolist","filter","entityStatus","changeTodolistTitleAC","changeTodolistFilterAC","changeTodolistEntityStatusAC","setTodolistsAC","todolists","map","clearTodosDataAC","extraReducers","todolistsReducer","removeTaskAC","tasks","t","addTaskAC","todoListId","updateTaskAC","setTasksAC","builder","addCase","forEach","tasksReducer","fetchTasks","createAsyncThunk","thunkAPI","res","items","updateTaskTC","getState","task","find","apiModel","deadline","description","priority","startDate","resultCode","catch","console","warn","AddItemForm","React","memo","addItem","disabled","log","useState","setTitle","setError","addItemHandler","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","Delete","Todolist","demo","useDispatch","useEffect","thunk","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","removeTodolist","style","paddingTop","Button","TodolistsList","useSelector","auth","a","response","item","addTaskTC","changeStatus","newTitle","changeTodolistTitleTC","addTodolist","addTodolistTC","Grid","container","padding","spacing","allTodolistTasks","Paper","to","Alert","elevation","ErrorSnackbar","app","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","resetForm","justify","xs","FormControl","handleSubmit","FormLabel","href","target","FormGroup","margin","getFieldProps","touched","type","FormControlLabel","control","App","logoutHandler","AppBar","position","Toolbar","edge","Menu","Typography","LinearProgress","Container","fixed","exact","path","render","textAlign","fontSize","from","top","width","CircularProgress","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","window","ReactDOM","StrictMode","document","getElementById"],"mappings":"yKA+EYA,EAOAC,E,gCCxEGC,G,OAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,kHDPRQ,E,OAAWC,EAAMC,OAAO,CAC1BC,QAAS,gDACTC,iBAAiB,EACjBC,QAAS,CACL,UAAW,0CAKNC,EAAe,WAGpB,OADgBN,EAASO,IAAoB,eAFxCD,EAAe,SAKTE,GAEX,OADgBR,EAASS,KAA2C,aAAc,CAACD,MAAOA,KANrFF,EAAe,SASTI,GAEX,OADgBV,EAASW,OAAT,qBAA4CD,KAVvDJ,EAAe,SAaTI,EAAYF,GAEvB,OADgBR,EAASY,IAAT,qBAAyCF,GAAM,CAACF,MAAOA,KAdlEF,EAAe,SAiBfO,GACL,OAAOb,EAASO,IAAT,qBAA6CM,EAA7C,YAlBFP,EAAe,SAuBbO,EAAoBC,GAC3B,OAAOd,EAASS,KAAT,qBAA8DI,EAA9D,UAAkF,CAACL,MAAOM,KAxB5FR,EAAe,SA0BbO,EAAoBE,EAAgBC,GAC3C,OAAOhB,EAASY,IAAT,qBAAmDC,EAAnD,kBAAuEE,GAAUC,IAKnFC,EAAU,SACbC,GACF,OAAOlB,EAASS,KAAT,aAA+DS,IAFjED,EAAU,WAKf,OAAOjB,EAASO,IAAT,YALFU,EAAU,WAQf,OAAOjB,EAASW,OAAT,gB,SA4BHtB,O,aAAAA,I,2BAAAA,I,yBAAAA,I,kBAAAA,M,cAOAC,O,aAAAA,I,mBAAAA,I,WAAAA,I,uBAAAA,I,kBAAAA,M,KElFL,IAAM6B,EAAuB,SAAID,EAAuBE,GACvDF,EAAKG,SAASC,OACdF,EAASG,EAAc,CAACC,MAAON,EAAKG,SAAS,MAE7CD,EAASG,EAAc,CAACC,MAAO,yBAEnCJ,EAASK,EAAe,CAACC,OAAQ,aAGxBC,EAA2B,SAACH,EAA4BJ,GACjEA,EAASG,EAAc,CAACC,MAAOA,EAAMI,QAAUJ,EAAMI,QAAU,yBAC/DR,EAASK,EAAe,CAACC,OAAQ,a,QCH/BG,EAAQC,YAAY,CACtBC,KAAM,OACNC,aANiB,CACjBC,YAAY,GAMZC,SAAU,CACNC,gBADM,SACUC,EAAOC,GACnBD,EAAMH,WAAaI,EAAOC,QAAQC,UAKjCC,EAAcX,EAAMY,QAEnBN,EAAmBN,EAAMa,QAAzBP,gBCbRN,EAAQC,YAAY,CACtBC,KAAM,MACNC,aARmC,CACnCN,OAAQ,OACRF,MAAO,KACPmB,eAAe,GAMfT,SAAU,CACNX,cADM,SACQa,EAAOC,GACjBD,EAAMZ,MAAQa,EAAOC,QAAQd,OAEjCC,eAJM,SAISW,EAAOC,GAClBD,EAAMV,OAASW,EAAOC,QAAQZ,QAElCkB,oBAPM,SAOcR,EAAOC,GACvBD,EAAMO,cAAgBN,EAAOC,QAAQC,UAKpCM,EAAahB,EAAMY,QAClBlB,EAAiBM,EAAMa,QAAvBnB,cACAE,EAAkBI,EAAMa,QAAxBjB,eACAmB,EAAuBf,EAAMa,QAA7BE,oBCnBRf,EAAQC,YAAY,CACtBC,KAAM,YACNC,aAJ4C,GAK5CE,SAAU,CACNY,iBADM,SACWV,EAAOC,GACpB,IAAMU,EAAQX,EAAMY,WAAU,SAAAC,GAAE,OAAIA,EAAGvC,KAAO2B,EAAOC,QAAQ5B,MACzDqC,GAAS,GACTX,EAAMc,OAAOH,EAAO,IAG5BI,cAPM,SAOQf,EAAOC,GACjBD,EAAMgB,QAAN,2BAAkBf,EAAOC,QAAQe,UAAjC,IAA2CC,OAAQ,MAAOC,aAAc,WAE5EC,sBAVM,SAUgBpB,EAAOC,GACzB,IAAMU,EAAQX,EAAMY,WAAU,SAAAC,GAAE,OAAIA,EAAGvC,KAAO2B,EAAOC,QAAQ5B,MAC7D0B,EAAMW,GAAOvC,MAAQ6B,EAAOC,QAAQ9B,OAExCiD,uBAdM,SAciBrB,EAAOC,GAC1B,IAAMU,EAAQX,EAAMY,WAAU,SAAAC,GAAE,OAAIA,EAAGvC,KAAO2B,EAAOC,QAAQ5B,MAC7D0B,EAAMW,GAAOO,OAASjB,EAAOC,QAAQgB,QAEzCI,6BAlBM,SAkBuBtB,EAAOC,GAChC,IAAMU,EAAQX,EAAMY,WAAU,SAAAC,GAAE,OAAIA,EAAGvC,KAAO2B,EAAOC,QAAQ5B,MAC7D0B,EAAMW,GAAOQ,aAAelB,EAAOC,QAAQZ,QAE/CiC,eAtBM,SAsBSvB,EAAOC,GAClB,OAAOA,EAAOC,QAAQsB,UAAUC,KAAI,SAAAZ,GAAE,kCAASA,GAAT,IAAaK,OAAQ,MAAOC,aAAc,aAEpFO,iBAzBM,SAyBW1B,EAAOC,MAI5B0B,cAAc,KAQLC,EAAmBnC,EAAMY,QAE/B,EAIHZ,EAAMa,QAHNiB,EADG,EACHA,eAAgBD,EADb,EACaA,6BAChBZ,EAFG,EAEHA,iBAAkBK,EAFf,EAEeA,cAAeK,EAF9B,EAE8BA,sBACjCM,EAHG,EAGHA,iBAAkBL,EAHf,EAGeA,uB,6BCvBhB5B,GAAQC,YAAY,CACtBC,KAAM,QACNC,aALiC,GAMjCE,SAAU,CACN+B,aADM,SACO7B,EAAOC,GAChB,IAAM6B,EAAQ9B,EAAMC,EAAOC,QAAQzB,YAC7BkC,EAAQmB,EAAMlB,WAAU,SAAAmB,GAAC,OAAIA,EAAEzD,KAAO2B,EAAOC,QAAQvB,UACvDgC,GAAS,GACTmB,EAAMhB,OAAOH,EAAO,IAG5BqB,UARM,SAQIhC,EAAOC,GACbD,EAAMC,EAAOC,QAAQ+B,YAAYjB,QAAQf,EAAOC,UAEpDgC,aAXM,SAWOlC,EAAOC,GAChB,IAAM6B,EAAQ9B,EAAMC,EAAOC,QAAQzB,YAC7BkC,EAAQmB,EAAMlB,WAAU,SAAAmB,GAAC,OAAIA,EAAEzD,KAAO2B,EAAOC,QAAQvB,UACvDgC,GAAS,IACTmB,EAAMnB,GAAN,2BAAmBmB,EAAMnB,IAAWV,EAAOC,QAAQtB,SAG3DuD,WAlBM,SAkBKnC,EAAOC,GACdD,EAAMC,EAAOC,QAAQzB,YAAcwB,EAAOC,QAAQ4B,QAG1DH,cAAe,SAACS,GACZA,EAAQC,QAAQtB,GAAe,SAACf,EAAOC,GACnCD,EAAMC,EAAOC,QAAQe,SAAS3C,IAAM,MAExC8D,EAAQC,QAAQ3B,GAAkB,SAACV,EAAOC,UAC/BD,EAAMC,EAAOC,QAAQ5B,OAEhC8D,EAAQC,QAAQd,GAAgB,SAACvB,EAAOC,GACpCA,EAAOC,QAAQsB,UAAUc,SAAQ,SAACzB,GAC9Bb,EAAMa,EAAGvC,IAAM,YAOlBiE,GAAe9C,GAAMY,QAC3B,GAA4DZ,GAAMa,QAA7C0B,IAArB,GAAOH,aAAP,GAAqBG,WAAWE,GAAhC,GAAgCA,aAAcC,GAA9C,GAA8CA,WAIvCK,GAAcC,YAAkB,oBAAoB,SAAChE,EAAoBiE,GACnFA,EAAS1D,SAASK,EAAe,CAACC,OAAQ,aAC1CpB,EAAsBO,GACjBnB,MAAK,SAACqF,GACH,IAAMb,EAAQa,EAAI7D,KAAK8D,MACvBF,EAAS1D,SAASmD,GAAW,CAACL,MAAOA,EAAOrD,WAAYA,KACxDiE,EAAS1D,SAASK,EAAe,CAACC,OAAQ,qBA+BzCuD,GAAe,SAAClE,EAAgBC,EAAkCH,GAAnD,OACxB,SAACO,EAAoB8D,GACjB,IACMC,EADQD,IACKhB,MAAMrD,GAAYuE,MAAK,SAAAjB,GAAC,OAAIA,EAAEzD,KAAOK,KACxD,GAAKoE,EAAL,CAMA,IAAME,EAA6B,aAC/BC,SAAUH,EAAKG,SACfC,YAAaJ,EAAKI,YAClBC,SAAUL,EAAKK,SACfC,UAAWN,EAAKM,UAChBjF,MAAO2E,EAAK3E,MACZkB,OAAQyD,EAAKzD,QACVV,GAGPV,EAAwBO,EAAYE,EAAQsE,GACvC3F,MAAK,SAAAqF,GACF,GAA4B,IAAxBA,EAAI7D,KAAKwE,WAAkB,CAC3B,IAAMrD,EAASiC,GAAa,CAACvD,SAAQC,QAAOH,eAC5CO,EAASiB,QAETlB,EAAqB4D,EAAI7D,KAAME,MAGtCuE,OAAM,SAACnE,GACJG,EAAyBH,EAAOJ,WAxBpCwE,QAAQC,KAAK,iC,yDCjHZC,GAAcC,IAAMC,MAAK,SAAS,GAAoD,IAAnDC,EAAkD,EAAlDA,QAAkD,IAAzCC,gBAAyC,SAC9FN,QAAQO,IAAI,sBAEZ,MAAwBC,mBAAS,IAAjC,oBAAK5F,EAAL,KAAY6F,EAAZ,KACA,EAAwBD,mBAAwB,MAAhD,oBAAK5E,EAAL,KAAY8E,EAAZ,KAEMC,EAAiB,WACE,KAAjB/F,EAAMgG,QACNP,EAAQzF,GACR6F,EAAS,KAETC,EAAS,sBAiBjB,OAAO,iCACH,eAACG,GAAA,EAAD,CAAWC,QAAQ,WACRR,SAAUA,EACV1E,QAASA,EACTe,MAAO/B,EACPmG,SAlBS,SAACC,GACrBP,EAASO,EAAEC,cAActE,QAkBduE,WAfW,SAACF,GACT,OAAVpF,GACA8E,EAAS,MAEM,KAAfM,EAAEG,UACFR,KAWOS,MAAM,QACNC,WAAYzF,IAEvB,eAAC0F,EAAA,EAAD,CAAYC,MAAM,UAAUC,QAASb,EAAgBL,SAAUA,EAA/D,SACI,eAACmB,GAAA,EAAD,Y,SCxCCC,GAAevB,IAAMC,MAAK,SAAUuB,GAC7C3B,QAAQO,IAAI,uBACZ,MAA8BC,oBAAS,GAAvC,oBAAKoB,EAAL,KAAeC,EAAf,KACA,EAAwBrB,mBAASmB,EAAMhF,OAAvC,oBAAK/B,EAAL,KAAY6F,EAAZ,KAcA,OAAOmB,EACE,eAACf,GAAA,EAAD,CAAWlE,MAAO/B,EAAOmG,SALd,SAACC,GACjBP,EAASO,EAAEC,cAActE,QAI4BmF,WAAS,EAACC,OAT1C,WACrBF,GAAY,GACZF,EAAMZ,SAASnG,MAQb,uBAAMoH,cAda,WACrBH,GAAY,GACZpB,EAASkB,EAAMhF,QAYb,SAAwCgF,EAAMhF,W,oBCd3CsF,GAAO9B,IAAMC,MAAK,SAACuB,GAC5B,IAAMO,EAAiBC,uBAAY,kBAAMR,EAAMS,WAAWT,EAAMpC,KAAKzE,GAAI6G,EAAM1G,cAAa,CAAC0G,EAAMpC,KAAKzE,GAAI6G,EAAM1G,aAE5GoH,EAAkBF,uBAAY,SAACnB,GACjC,IAAIsB,EAAiBtB,EAAEC,cAAcsB,QACrCZ,EAAMa,iBAAiBb,EAAMpC,KAAKzE,GAAIwH,EAAiB7I,EAAagJ,UAAYhJ,EAAaiJ,IAAKf,EAAM1G,cACzG,CAAC0G,EAAMpC,KAAKzE,GAAI6G,EAAM1G,aAEnB0H,EAAuBR,uBAAY,SAACS,GACtCjB,EAAMkB,gBAAgBlB,EAAMpC,KAAKzE,GAAI8H,EAAUjB,EAAM1G,cACtD,CAAC0G,EAAMpC,KAAKzE,GAAI6G,EAAM1G,aAEzB,OAAO,uBAAyB6H,UAAWnB,EAAMpC,KAAKzD,SAAWrC,EAAagJ,UAAY,UAAY,GAA/F,UACH,eAACM,GAAA,EAAD,CACIR,QAASZ,EAAMpC,KAAKzD,SAAWrC,EAAagJ,UAC5ClB,MAAM,UACNR,SAAUsB,IAGd,eAACX,GAAD,CAAc/E,MAAOgF,EAAMpC,KAAK3E,MAAOmG,SAAU4B,IACjD,eAACrB,EAAA,EAAD,CAAYE,QAASU,EAArB,SACI,eAACc,GAAA,EAAD,QATSrB,EAAMpC,KAAKzE,O,YCDnBmI,GAAW9C,IAAMC,MAAK,YAAgD,IAAD,IAApC8C,YAAoC,SAAnBvB,EAAmB,mBAExEnG,EAAW2H,cACjBC,qBAAU,WACN,IAAIF,EAAJ,CAGA,IAAMG,EAAQrE,GAAW2C,EAAMlE,SAAS3C,IACxCU,EAAS6H,MACV,IAEH,IAAMC,EAAUnB,uBAAY,SAACvH,GACzB+G,EAAM2B,QAAQ1I,EAAO+G,EAAMlE,SAAS3C,MACrC,CAAC6G,EAAM2B,QAAS3B,EAAMlE,SAAS3C,KAK5ByI,EAAsBpB,uBAAY,SAACvH,GACrC+G,EAAM4B,oBAAoB5B,EAAMlE,SAAS3C,GAAIF,KAC9C,CAAC+G,EAAMlE,SAAS3C,GAAI6G,EAAM4B,sBAEvBC,EAAoBrB,uBAAY,kBAAMR,EAAM8B,aAAa,MAAO9B,EAAMlE,SAAS3C,MAAK,CAAC6G,EAAMlE,SAAS3C,GAAI6G,EAAM8B,eAC9GC,EAAuBvB,uBAAY,kBAAMR,EAAM8B,aAAa,SAAU9B,EAAMlE,SAAS3C,MAAK,CAAC6G,EAAMlE,SAAS3C,GAAI6G,EAAM8B,eACpHE,EAA0BxB,uBAAY,kBAAMR,EAAM8B,aAAa,YAAa9B,EAAMlE,SAAS3C,MAAK,CAAC6G,EAAMlE,SAAS3C,GAAI6G,EAAM8B,eAG5HG,EAAmBjC,EAAMrD,MAS7B,MAP8B,WAA1BqD,EAAMlE,SAASC,SACfkG,EAAmBjC,EAAMrD,MAAMZ,QAAO,SAAAa,GAAC,OAAIA,EAAEzC,SAAWrC,EAAaiJ,QAE3C,cAA1Bf,EAAMlE,SAASC,SACfkG,EAAmBjC,EAAMrD,MAAMZ,QAAO,SAAAa,GAAC,OAAIA,EAAEzC,SAAWrC,EAAagJ,cAGlE,iCACH,gCAAI,eAACf,GAAD,CAAc/E,MAAOgF,EAAMlE,SAAS7C,MAAOmG,SAAUwC,IACrD,eAACjC,EAAA,EAAD,CAAYE,QAvBG,WACnBG,EAAMkC,eAAelC,EAAMlE,SAAS3C,KAsBKwF,SAA0C,YAAhCqB,EAAMlE,SAASE,aAA9D,SACI,eAACqF,GAAA,EAAD,SAGR,eAAC9C,GAAD,CAAaG,QAASiD,EAAShD,SAA0C,YAAhCqB,EAAMlE,SAASE,eACxD,+BAEQiG,EAAiB3F,KAAI,SAAAM,GAAC,OAAI,eAAC0D,GAAD,CAAiB1C,KAAMhB,EAAGtD,WAAY0G,EAAMlE,SAAS3C,GAC/CsH,WAAYT,EAAMS,WAClBS,gBAAiBlB,EAAMkB,gBACvBL,iBAAkBb,EAAMa,kBAHnBjE,EAAEzD,SAO/C,uBAAKgJ,MAAO,CAACC,WAAY,QAAzB,UACI,eAACC,EAAA,EAAD,CAAQlD,QAAmC,QAA1Ba,EAAMlE,SAASC,OAAmB,WAAa,OACxD8D,QAASgC,EACTjC,MAAO,UAFf,iBAKA,eAACyC,EAAA,EAAD,CAAQlD,QAAmC,WAA1Ba,EAAMlE,SAASC,OAAsB,WAAa,OAC3D8D,QAASkC,EACTnC,MAAO,UAFf,oBAIA,eAACyC,EAAA,EAAD,CAAQlD,QAAmC,cAA1Ba,EAAMlE,SAASC,OAAyB,WAAa,OAC9D8D,QAASmC,EACTpC,MAAO,YAFf,gC,SC/DC0C,GAAqC,SAAC,GAAoB,IAAD,IAAlBf,YAAkB,SAC5D7G,EAAa6H,aAAuC,SAAA1H,GAAK,OAAIA,EAAM2H,KAAK9H,cACxE2B,EAAYkG,aAAyD,SAAA1H,GAAK,OAAIA,EAAMwB,aACpFM,EAAQ4F,aAA8C,SAAA1H,GAAK,OAAIA,EAAM8B,SACrE9C,EAAW2H,cAGjBC,qBAAU,YACFF,GAAS7G,GAGbb,GN2BG,SAACA,GACJA,EAASK,EAAe,CAACC,OAAQ,aACjCpB,IACKZ,MAAK,SAACqF,GAGH,OAFA3D,EAASuC,EAAe,CAACC,UAAWmB,EAAI7D,QACxCE,EAASK,EAAe,CAACC,OAAQ,eAC1BqD,EAAI7D,QAEdyE,OAAM,SAAAnE,GACHG,EAAyBH,EAAOJ,WMnCzC,IAEH,IAAM4G,EAAaD,uBAAY,SAAUrH,EAAYG,GACjD,IAAMoI,EAAQjB,EAAWtH,EAAIG,GAC7BO,EAAS6H,KACV,IAEGC,EAAUnB,uBAAY,SAAUvH,EAAeK,GACjD,IAAMoI,ELuDW,SAACzI,EAAeK,GAAhB,gDAAuC,WAAOO,GAAP,oBAAA4I,EAAA,sEAExD5I,EAASK,EAAe,CAACC,OAAQ,aAFuB,SAGjCpB,EAAwBO,EAAYL,GAHH,OAIvB,KAD3ByJ,EAHkD,QAI3C/I,KAAKwE,YACRP,EAAO8E,EAAS/I,KAAKA,KAAKgJ,KAC1B7H,EAAS+B,GAAUe,GACzB/D,EAASiB,GACTjB,EAASK,EAAe,CAACC,OAAQ,gBAEjCP,EAAqB8I,EAAS/I,KAAME,GAVgB,gDAaxDO,EAAyB,EAAD,GAAQP,GAbwB,yDAAvC,sDKvDH+I,CAAU3J,EAAOK,GAC/BO,EAAS6H,KACV,IAEGmB,EAAerC,uBAAY,SAAUrH,EAAYgB,EAAsBb,GACzE,IAAMoI,EAAQhE,GAAavE,EAAI,CAACgB,UAASb,GACzCO,EAAS6H,KACV,IAEGR,EAAkBV,uBAAY,SAAUrH,EAAY2J,EAAkBxJ,GACxE,IAAMoI,EAAQhE,GAAavE,EAAI,CAACF,MAAO6J,GAAWxJ,GAClDO,EAAS6H,KACV,IAEGI,EAAetB,uBAAY,SAAUxF,EAAyB1B,GAChE,IAAMwB,EAASoB,EAAuB,CAACH,OAAQf,EAAO7B,GAAIG,IAC1DO,EAASiB,KACV,IAEGoH,EAAiB1B,uBAAY,SAAUrH,GACzC,INWyBG,EMXnBoI,GNWmBpI,EMXMH,ENY5B,SAACU,GAEJA,EAASK,EAAe,CAACC,OAAQ,aAEjCN,EAASsC,EAA6B,CAAChD,GAAIG,EAAYa,OAAQ,aAC/DpB,EAA4BO,GACvBnB,MAAK,SAACqF,GACH3D,EAAS0B,EAAiB,CAACpC,GAAIG,KAE/BO,EAASK,EAAe,CAACC,OAAQ,oBMpBzCN,EAAS6H,KACV,IAEGE,EAAsBpB,uBAAY,SAAUrH,EAAYF,GAC1D,IAAMyI,EN8BuB,SAACvI,EAAYF,GAC9C,OAAO,SAACY,GACJd,EAA4BI,EAAIF,GAC3Bd,MAAK,SAACqF,GACH3D,EAASoC,EAAsB,CAAC9C,GAAGA,EAAIF,MAAMA,SMlCvC8J,CAAsB5J,EAAIF,GACxCY,EAAS6H,KACV,IAEGsB,EAAcxC,uBAAY,SAACvH,GAC7B,IAAMyI,ENee,SAACzI,GAC1B,OAAO,SAACY,GACJA,EAASK,EAAe,CAACC,OAAQ,aACjCpB,EAA4BE,GACvBd,MAAK,SAACqF,GACH3D,EAAS+B,EAAc,CAACE,SAAU0B,EAAI7D,KAAKA,KAAKgJ,QAChD9I,EAASK,EAAe,CAACC,OAAQ,mBMrB3B8I,CAAchK,GAC5BY,EAAS6H,KACV,CAAC7H,IAEJ,OAAKa,EAIE,uCACH,eAACwI,GAAA,EAAD,CAAMC,WAAS,EAAChB,MAAO,CAACiB,QAAS,QAAjC,SACI,eAAC7E,GAAD,CAAaG,QAASsE,MAE1B,eAACE,GAAA,EAAD,CAAMC,WAAS,EAACE,QAAS,EAAzB,SAEQhH,EAAUC,KAAI,SAAAZ,GACV,IAAI4H,EAAmB3G,EAAMjB,EAAGvC,IAEhC,OAAO,eAAC+J,GAAA,EAAD,CAAMP,MAAI,EAAV,SACH,eAACY,GAAA,EAAD,CAAOpB,MAAO,CAACiB,QAAS,QAAxB,SACI,eAAC9B,GAAD,CACIxF,SAAUJ,EACViB,MAAO2G,EACP7C,WAAYA,EACZqB,aAAcA,EACdH,QAASA,EACTd,iBAAkBgC,EAClBX,eAAgBA,EAChBhB,gBAAiBA,EACjBU,oBAAqBA,EACrBL,KAAMA,OAZK7F,EAAGvC,YAZ/B,eAAC,KAAD,CAAUqK,GAAI,Y,oBCvE7B,SAASC,GAAMzD,GACX,OAAO,eAAC,KAAD,aAAU0D,UAAW,EAAGvE,QAAQ,UAAaa,IAGjD,SAAS2D,KAEZ,IAAM1J,EAAQsI,aAA6C,SAAA1H,GAAK,OAAIA,EAAM+I,IAAI3J,SACxEJ,EAAW2H,cAEXqC,EAAc,SAACC,EAA8BC,GAChC,cAAXA,GAGJlK,EAASG,EAAc,CAACC,MAAO,SAI7B+J,EAAmB,OAAV/J,EAEf,OACI,eAACgK,GAAA,EAAD,CAAUC,KAAMF,EAAQG,iBAAkB,IAAMC,QAASP,EAAzD,SACI,eAAC,GAAD,CAAOO,QAASP,EAAaQ,SAAS,QAAtC,SACKpK,M,qDCdJqK,GAAQ,WACjB,IAAMzK,EAAW2H,cACX9G,EAAa6H,aAAuC,SAAA1H,GAAK,OAAIA,EAAM2H,KAAK9H,cAIxE6J,EAASC,aAAU,CACrBC,cAAe,CACXC,MAAO,GACPC,SAAU,GACVC,YAAY,GAEhBC,SAAU,SAACC,GACP,IAAMC,EAA0B,GAWhC,OAVKD,EAAOJ,MAEA,4CAA4CM,KAAKF,EAAOJ,SAChEK,EAAOL,MAAQ,yBAFfK,EAAOL,MAAQ,WAIdI,EAAOH,SAEDG,EAAOH,SAAS5K,OAAS,IAChCgL,EAAOJ,SAAW,gCAFlBI,EAAOJ,SAAW,WAIfI,GAEXE,SAAU,SAAAH,GVdK,IAACnL,EUeZE,GVfYF,EUeKmL,EVfqB,SAACjL,GAC/CA,EAASK,EAAe,CAACC,OAAQ,aACjCT,EAAcC,GACTxB,MAAK,SAAAqF,GAC0B,IAAxBA,EAAI7D,KAAKwE,YACTtE,EAASe,EAAgB,CAACI,OAAO,KACjCnB,EAASK,EAAe,CAACC,OAAQ,gBAEjCP,EAAqB4D,EAAI7D,KAAME,MAGtCuE,OAAM,SAACnE,GACJG,EAAyBH,EAAOJ,SUIhC0K,EAAOW,eAIf,OAAIxK,EACO,eAAC,KAAD,CAAU8I,GAAI,MAKlB,eAACN,GAAA,EAAD,CAAMC,WAAS,EAACgC,QAAQ,SAAxB,SACH,eAACjC,GAAA,EAAD,CAAMP,MAAI,EAACyC,GAAI,EAAf,SACI,eAACC,GAAA,EAAD,UACI,wBAAMJ,SAAUV,EAAOe,aAAvB,UACI,gBAACC,GAAA,EAAD,WACI,0DACI,oBAAGC,KAAM,wCACNC,OAAQ,SADX,qBAIJ,yEACA,2DACA,mDAGJ,gBAACC,GAAA,EAAD,WACI,eAACxG,GAAA,EAAD,aACIO,MAAM,QACNkG,OAAO,UACHpB,EAAOqB,cAAc,WAM5BrB,EAAOsB,QAAQnB,OAASH,EAAOQ,OAAOL,MACnC,sBAAKvC,MAAO,CAACvC,MAAO,OAApB,SAA6B2E,EAAOQ,OAAOL,QAAe,KAC9D,eAACxF,GAAA,EAAD,aACI4G,KAAK,WACLrG,MAAM,WACNkG,OAAO,UACHpB,EAAOqB,cAAc,cAM5BrB,EAAOsB,QAAQlB,UAAYJ,EAAOQ,OAAOJ,SACtC,sBAAKxC,MAAO,CAACvC,MAAO,OAApB,SAA6B2E,EAAOQ,OAAOJ,WAAkB,KACjE,eAACoB,GAAA,EAAD,yBACItG,MAAO,cACPuG,QAAS,eAAC5E,GAAA,EAAD,KACLmD,EAAOqB,cAAc,eAH7B,IAIIhF,QAAS2D,EAAOO,OAAOF,cAK3B,eAACvC,EAAA,EAAD,CAAQyD,KAAM,SAAU3G,QAAS,YAAaS,MAAO,UAArD,gCCxBTqG,OAlDf,YAAyC,IAAD,IAA1B1E,YAA0B,SAC9B1H,EAAW2H,cACXrH,EAASoI,aAAiD,SAAC1H,GAAD,OAAWA,EAAM+I,IAAIzJ,UAC/EiB,EAAgBmH,aAAuC,SAAA1H,GAAK,OAAIA,EAAM+I,IAAIxI,iBAC1EV,EAAa6H,aAAuC,SAAA1H,GAAK,OAAIA,EAAM2H,KAAK9H,cAE9E+G,qBAAU,WACN5H,GVS6B,SAACA,GAClCH,IACKvB,MAAK,SAAAqF,GAC0B,IAAxBA,EAAI7D,KAAKwE,YACTtE,EAASe,EAAgB,CAACI,OAAO,KAErCnB,EAASwB,EAAoB,CAACL,OAAO,aUd1C,IAEH,IAAMkL,EAAgB1F,uBAAY,WAC9B3G,GXKsB,SAACA,GAC3BA,EAASK,EAAe,CAACC,OAAQ,aACjCT,IACKvB,MAAK,SAAAqF,GAC0B,IAAxBA,EAAI7D,KAAKwE,YACTtE,EAASe,EAAgB,CAACI,OAAO,KACjCnB,EAASK,EAAe,CAACC,OAAQ,eACjCN,EAAS0C,MAET3C,EAAqB4D,EAAI7D,KAAME,MAGtCuE,OAAM,SAACnE,GACJG,EAAyBH,EAAOJ,WWjBrC,IAEH,OAAKuB,EASD,uBAAK+F,UAAU,MAAf,UACI,eAACwC,GAAD,IACA,gBAACwC,EAAA,EAAD,CAAQC,SAAS,SAAjB,UACI,gBAACC,EAAA,EAAD,WACI,eAAC1G,EAAA,EAAD,CAAY2G,KAAK,QAAQ1G,MAAM,UAAU,aAAW,OAApD,SACI,eAAC2G,EAAA,EAAD,MAEJ,eAACC,EAAA,EAAD,CAAYrH,QAAQ,KAApB,kBAGCzE,GAAc,eAAC2H,EAAA,EAAD,CAAQxC,QAASqG,EAAetG,MAAM,UAAtC,wBAEP,YAAXzF,GAAwB,eAACsM,EAAA,EAAD,OAE7B,eAACC,EAAA,EAAD,CAAWC,OAAK,EAAhB,SACI,gBAAC,KAAD,WACI,eAAC,KAAD,CAAOC,OAAK,EAACC,KAAM,IAAKC,OAAQ,kBAAM,eAAC,GAAD,CAAevF,KAAMA,OAC3D,eAAC,KAAD,CAAOsF,KAAM,SAAUC,OAAQ,kBAAM,eAAC,GAAD,OACrC,eAAC,KAAD,CAAOD,KAAM,OACNC,OAAQ,kBAAM,qBAAI3E,MAAO,CAAC4E,UAAW,SAAUC,SAAU,QAA3C,oCACrB,eAAC,KAAD,CAAUC,KAAM,IAAKzD,GAAI,iBA5B9B,sBACHrB,MAAO,CAACiE,SAAU,QAASc,IAAK,MAAOH,UAAW,SAAUI,MAAO,QADhE,SAEH,eAACC,EAAA,EAAD,CAAkBxH,MAAO,e,kBCnC/ByH,GAAcC,aAAgB,CAChC3K,MAAOS,GACPf,UAAWI,EACXmH,IAAKtI,EACLkH,KAAMvH,IAKGsM,GAAQC,YAAe,CAChCtM,QAASmM,GACTI,WAAY,SAAAC,GAAoB,OAAIA,IAAuBC,QAAQC,SAQvEC,OAAON,MAAQA,G,aCnBfO,IAAShB,OACL,eAAC,IAAMiB,WAAP,UACI,eAAC,KAAD,UACI,eAAC,IAAD,CAAUR,MAAOA,GAAjB,SACI,eAAC,GAAD,UAIZS,SAASC,eAAe,SAM5BjQ,M","file":"static/js/main.0476ef7f.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '65933dcc-6afe-43bc-af50-63aed10a4c85'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        const promise = instance.get<TodolistType[]>('todo-lists');\r\n        return promise;\r\n    },\r\n    createTodolist(title: string) {\r\n        const promise = instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\r\n        return promise;\r\n    },\r\n    deleteTodolist(id: string) {\r\n        const promise = instance.delete<ResponseType>(`todo-lists/${id}`);\r\n        return promise;\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        const promise = instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\r\n        return promise;\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitle: string) {\r\n        return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks`, {title: taskTitle});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    },\r\n\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<ResponseType<{ userId?: number }>>(`auth/login`, data)\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<{ id: number, email: string, login:string }>>(`auth/me`)\r\n    },\r\n    logout(){\r\n        return instance.delete<ResponseType<{userId?:string}>>(`auth/login`)\r\n    }\r\n}\r\n\r\n\r\n// types\r\n\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../app/app-reducer'\r\nimport {ResponseType} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC({error: data.messages[0]}))\r\n    } else {\r\n        dispatch(setAppErrorAC({error: 'Some error occurred'}))\r\n    }\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppErrorAC({error: error.message ? error.message : 'Some error occurred'}))\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n","import {Dispatch} from 'redux'\r\nimport {setAppStatusAC} from '../../app/app-reducer'\r\nimport {authAPI, LoginParamsType} from \"../../api/todolists-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {clearTodosDataAC} from \"../TodolistsList/todolists-reducer\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: \"auth\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        setIsLoggedInAC(state, action: PayloadAction<{ value: boolean }>) {\r\n            state.isLoggedIn = action.payload.value\r\n        }\r\n    }\r\n})\r\n\r\nexport const authReducer = slice.reducer\r\n\r\nexport const {setIsLoggedInAC} = slice.actions //const setIsLoggedInAC = slice.actions.setIsLoggedInAC\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    authAPI.login(data)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC({value: true}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC({value: false}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                dispatch(clearTodosDataAC())\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../api/todolists-api\";\r\nimport {setIsLoggedInAC} from \"../features/login/auth-reducer\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: \"app\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        setAppErrorAC(state, action: PayloadAction<{ error: string | null }>) {\r\n            state.error = action.payload.error\r\n        },\r\n        setAppStatusAC(state, action: PayloadAction<{ status: RequestStatusType }>) {\r\n            state.status = action.payload.status\r\n        },\r\n        setAppInitializedAC(state, action: PayloadAction<{ value: boolean }>) {\r\n            state.isInitialized = action.payload.value\r\n        },\r\n    }\r\n})\r\n\r\nexport const appReducer = slice.reducer\r\nexport const {setAppErrorAC} = slice.actions\r\nexport const {setAppStatusAC} = slice.actions\r\nexport const {setAppInitializedAC} = slice.actions\r\n\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    status: RequestStatusType\r\n    error: string | null\r\n    isInitialized: boolean\r\n}\r\n\r\n\r\nexport const initializeAppTc = () => (dispatch: Dispatch) => {\r\n    authAPI.me()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC({value: true}));\r\n            }\r\n            dispatch(setAppInitializedAC({value: true}));\r\n        })\r\n}\r\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {\r\n    RequestStatusType,\r\n    setAppStatusAC,\r\n} from '../../app/app-reducer'\r\nimport {handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nconst slice = createSlice({\r\n    name: \"todolists\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        removeTodolistAC(state, action: PayloadAction<{ id: string }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            if (index > -1) {\r\n                state.splice(index, 1)\r\n            }\r\n        },\r\n        addTodolistAC(state, action: PayloadAction<{ todolist: TodolistType }>) {\r\n            state.unshift({...action.payload.todolist, filter: 'all', entityStatus: 'idle'})\r\n        },\r\n        changeTodolistTitleAC(state, action: PayloadAction<{ id: string, title: string }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].title = action.payload.title\r\n        },\r\n        changeTodolistFilterAC(state, action: PayloadAction<{ id: string, filter: FilterValuesType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].filter = action.payload.filter\r\n        },\r\n        changeTodolistEntityStatusAC(state, action: PayloadAction<{ id: string, status: RequestStatusType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].entityStatus = action.payload.status\r\n        },\r\n        setTodolistsAC(state, action: PayloadAction<{ todolists: Array<TodolistType> }>) {\r\n            return action.payload.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        },\r\n        clearTodosDataAC(state, action: PayloadAction) {\r\n\r\n        },\r\n    },\r\n    extraReducers:{\r\n        // [initializeAppAc.type]: ()=> {\r\n        //\r\n        // }\r\n    }\r\n})\r\n\r\n\r\nexport const todolistsReducer = slice.reducer\r\n\r\nexport const {\r\n    setTodolistsAC, changeTodolistEntityStatusAC,\r\n    removeTodolistAC, addTodolistAC, changeTodolistTitleAC,\r\n    clearTodosDataAC, changeTodolistFilterAC\r\n} = slice.actions\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC({todolists: res.data}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                return res.data\r\n            })\r\n            .catch(error => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        //изменим глобальный статус приложения, чтобы вверху полоса побежала\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n        dispatch(changeTodolistEntityStatusAC({id: todolistId, status: 'loading'}))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                dispatch(removeTodolistAC({id: todolistId}))\r\n                //скажем глобально приложению, что асинхронная операция завершена\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                dispatch(addTodolistAC({todolist: res.data.data.item}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                dispatch(changeTodolistTitleAC({id:id, title:title}))\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n","import {\r\n    addTodolistAC,\r\n    removeTodolistAC, setTodolistsAC,\r\n} from './todolists-reducer'\r\nimport {\r\n    TaskPriorities,\r\n    TaskStatuses,\r\n    TaskType,\r\n    todolistsAPI,\r\n    UpdateTaskModelType\r\n} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppStatusAC} from '../../app/app-reducer'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\nimport {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit'\r\n\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\n\r\nconst slice = createSlice({\r\n    name: 'tasks',\r\n    initialState,\r\n    reducers: {\r\n        removeTaskAC(state, action: PayloadAction<{ taskId: string, todolistId: string }>) {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks.splice(index, 1)\r\n            }\r\n        },\r\n        addTaskAC(state, action: PayloadAction<TaskType>) {\r\n            state[action.payload.todoListId].unshift(action.payload)\r\n        },\r\n        updateTaskAC(state, action: PayloadAction<{ taskId: string, model: UpdateDomainTaskModelType, todolistId: string }>) {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks[index] = {...tasks[index], ...action.payload.model}\r\n            }\r\n        },\r\n        setTasksAC(state, action: PayloadAction<{ tasks: Array<TaskType>, todolistId: string }>) {\r\n            state[action.payload.todolistId] = action.payload.tasks\r\n        },\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(addTodolistAC, (state, action) => {\r\n            state[action.payload.todolist.id] = []\r\n        })\r\n        builder.addCase(removeTodolistAC, (state, action) => {\r\n            delete state[action.payload.id]\r\n        })\r\n        builder.addCase(setTodolistsAC, (state, action) => {\r\n            action.payload.todolists.forEach((tl: any) => {\r\n                state[tl.id] = []\r\n            })\r\n        })\r\n    }\r\n})\r\n\r\n\r\nexport const tasksReducer = slice.reducer\r\nexport const {removeTaskAC, addTaskAC, updateTaskAC, setTasksAC} = slice.actions\r\n\r\n// THUNKS\r\n\r\nexport  const fetchTasks =  createAsyncThunk ('tasks/fetchTasks', (todolistId: string, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            thunkAPI.dispatch(setTasksAC({tasks: tasks, todolistId: todolistId}))\r\n            thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        })\r\n})\r\n\r\nexport const removeTask = (taskId: string, todolistId: string) => async (dispatch: Dispatch) => {\r\n    try {\r\n        await todolistsAPI.deleteTask(todolistId, taskId)\r\n        const action = removeTaskAC({taskId: taskId, todolistId: todolistId})\r\n        dispatch(action)\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch)\r\n    }\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => async (dispatch: Dispatch) => {\r\n    try {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        const response = await todolistsAPI.createTask(todolistId, title)\r\n        if (response.data.resultCode === 0) {\r\n            const task = response.data.data.item\r\n            const action = addTaskAC(task)\r\n            dispatch(action)\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        } else {\r\n            handleServerAppError(response.data, dispatch)\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch)\r\n    }\r\n\r\n}\r\n\r\nexport const updateTaskTC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...model\r\n        }\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = updateTaskAC({taskId, model, todolistId})\r\n                    dispatch(action)\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Box, Button, FormControl, IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function({addItem, disabled = false}: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log(\"EditableSpan called\");\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {fetchTasks} from '../tasks-reducer'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        const thunk = fetchTasks(props.todolist.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTask, TasksStateType, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport {Grid, Paper} from '@material-ui/core'\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return;\r\n        }\r\n        dispatch(fetchTodolistsTC())\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTask(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC({filter: value, id: todolistId})\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppErrorAC} from '../../app/app-reducer'\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    //const [open, setOpen] = React.useState(true)\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error);\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC({error: null}));\r\n    }\r\n\r\n\r\n    const isOpen = error !== null;\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import React, {useEffect} from 'react'\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginTC} from \"./auth-reducer\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n    const dispatch = useDispatch();\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'Must be 3 characters or more';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm();\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n\r\n\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <FormControl>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}>here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}\r\n                            // name={\"email\"}\r\n                            // onChange={formik.handleChange}\r\n                            // value={formik.values.email}\r\n                            // onBlur={formik.handleBlur}\r\n                        />\r\n                        {formik.touched.email && formik.errors.email ?\r\n                            <div style={{color: 'red'}}>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n                            // name={\"password\"}\r\n                            // onChange={formik.handleChange}\r\n                            // value={formik.values.password}\r\n                            // onBlur={formik.handleBlur}\r\n                        />\r\n                        {formik.touched.password && formik.errors.password ?\r\n                            <div style={{color: 'red'}}>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox/>}\r\n                            {...formik.getFieldProps('rememberMe')}\r\n                            checked={formik.values.rememberMe}\r\n                            // name={\"rememberMe\"}\r\n                            // onChange={formik.handleChange}\r\n                            // value={formik.values.rememberMe}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </form>\r\n            </FormControl>\r\n        </Grid>\r\n    </Grid>\r\n\r\n}\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport './App.css'\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    Toolbar,\r\n    Typography\r\n} from '@material-ui/core'\r\nimport {Menu} from '@material-ui/icons'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from './store'\r\nimport {initializeAppTc, RequestStatusType} from './app-reducer'\r\nimport {Login} from \"../features/login/Login\";\r\nimport {Redirect, Route, Switch} from \"react-router-dom\";\r\nimport {logoutTC} from \"../features/login/auth-reducer\";\r\n\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n    const dispatch = useDispatch();\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTc())\r\n    }, [])\r\n\r\n    const logoutHandler = useCallback(() => {\r\n        dispatch(logoutTC())\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress color={'primary'}/>\r\n        </div>\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    {isLoggedIn && <Button onClick={logoutHandler} color=\"inherit\">Log out</Button>}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Switch>\r\n                    <Route exact path={'/'} render={() => <TodolistsList demo={demo}/>}/>\r\n                    <Route path={'/login'} render={() => <Login/>}/>\r\n                    <Route path={'/404'}\r\n                           render={() => <h1 style={{textAlign: \"center\", fontSize: \"4rem\"}}>404: PAGE NOT FOUND</h1>}/>\r\n                    <Redirect from={'*'} to={'/404'}/>\r\n                </Switch>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import {tasksReducer} from '../features/TodolistsList/tasks-reducer';\r\nimport {todolistsReducer} from '../features/TodolistsList/todolists-reducer';\r\nimport {combineReducers} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from './app-reducer'\r\nimport {authReducer} from \"../features/login/auth-reducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n\r\n// export const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunkMiddleware)\r\n})\r\n\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './app/App';\nimport {Provider} from 'react-redux';\nimport {store} from './app/store';\nimport {BrowserRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <BrowserRouter>\n            <Provider store={store}>\n                <App/>\n            </Provider>\n        </BrowserRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}